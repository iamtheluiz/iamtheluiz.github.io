{"version":3,"sources":["services/projects.js","assets/profile.jpg","components/Header/index.js","components/About/index.js","components/Projects/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","name","description","technology","repository","Header","sections","href","src","alt","map","section","key","id","About","photo","target","rel","Projects","projects","project","className","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sHAAAA,EAAOC,QAAU,CACf,CACEC,KAAM,YACNC,YAAa,kDACbC,WAAY,aACZC,WAAY,2CAEd,CACEH,KAAM,eACNC,YAAa,8CACbC,WAAY,aACZC,WAAY,gD,gBCXhBL,EAAOC,QAAU,IAA0B,qC,sOCI5B,SAASK,EAAT,GAA+B,IAAbC,EAAY,EAAZA,SAC/B,OACE,gCACE,uBAAGC,KAAK,KACN,yBAAKC,IAAI,eAAeC,IAAI,eAE9B,6BACE,4BACGH,EAASI,KAAI,SAAAC,GAAO,OACnB,wBAAIC,IAAKD,EAAQE,IACf,uBAAGN,KAAI,WAAMI,EAAQE,KAAOF,EAAQV,a,0CCHnC,SAASa,IACtB,OACE,6BAASD,GAAG,SACV,yBAAKL,IAAKO,IAAON,IAAI,YACrB,4CACA,0GACA,4BACE,4BACE,uBAAGF,KAAK,iCAAiCS,OAAO,SAASC,IAAI,uBAC3D,kBAAC,IAAD,QAGJ,4BACE,uBAAGV,KAAK,wEAAwES,OAAO,SAASC,IAAI,uBAClG,kBAAC,IAAD,QAGJ,4BACE,uBAAGV,KAAK,mCACN,kBAAC,IAAD,QAGJ,4BACE,uBAAGA,KAAK,4CAA4CS,OAAO,SAASC,IAAI,uBACtE,kBAAC,IAAD,U,MC/BG,SAASC,EAAT,GAAiC,IAAbC,EAAY,EAAZA,SACjC,OACE,6BAASN,GAAG,YACV,wCACA,4BACGM,EAAST,KAAI,SAAAU,GAAO,OACnB,wBAAIR,IAAKQ,EAAQhB,WAAYiB,UAAU,QACrC,uBAAGd,KAAMa,EAAQhB,WAAYY,OAAO,SAASC,IAAI,uBAC/C,4BAAKG,EAAQnB,MACb,2BAAImB,EAAQlB,aACZ,gCACE,yBAAKmB,UAAU,WADjB,IACkCD,EAAQjB,mB,MCXzC,SAASmB,IACtB,OACE,gFCwBWC,MAnBf,WAOE,OACE,oCACE,kBAAClB,EAAD,CAAQC,SARK,CACf,CAAEL,KAAM,QAASY,GAAI,SACrB,CAAEZ,KAAM,WAAYY,GAAI,YACxB,CAAEZ,KAAM,eAAgBY,GAAI,kBAM1B,8BACE,kBAACC,EAAD,MACA,kBAACI,EAAD,CAAUC,SAAUA,OAEtB,kBAACG,EAAD,QCbcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a8142414.chunk.js","sourcesContent":["module.exports = [\r\n  {\r\n    name: 'Harmonist',\r\n    description: 'ðŸŽµ CLI to manage music files metadata',\r\n    technology: 'Javascript',\r\n    repository: 'https://github.com/iamtheluiz/harmonist'\r\n  },\r\n  {\r\n    name: 'reactPokedex',\r\n    description: 'A pokedex made with ReactJS and PokeAPI.co!',\r\n    technology: 'Javascript',\r\n    repository: 'https://github.com/iamtheluiz/reactPokedex'\r\n  }\r\n]","module.exports = __webpack_public_path__ + \"static/media/profile.53d6dd3d.jpg\";","import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nexport default function Header({ sections }) {\r\n  return (\r\n    <header>\r\n      <a href=\"/\">\r\n        <img src=\"/favicon.png\" alt=\"Site logo\" />\r\n      </a>\r\n      <nav>\r\n        <ul>\r\n          {sections.map(section => (\r\n            <li key={section.id}>\r\n              <a href={`#${section.id}`}>{section.name}</a>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\n// Icons\r\nimport { FaGithub, FaLinkedinIn, FaInstagram } from 'react-icons/fa';\r\nimport { MdMail } from 'react-icons/md';\r\n\r\nimport './styles.css';\r\n\r\n// Photo\r\nimport photo from '../../assets/profile.jpg';\r\n\r\nexport default function About() {\r\n  return (\r\n    <section id=\"About\">\r\n      <img src={photo} alt=\"Profile\" />\r\n      <h1>Luiz Gustavo</h1>\r\n      <p>Cada dia mais impressionado com as portas que a tecnologia estÃ¡ abrindo!</p>\r\n      <ul>\r\n        <li>\r\n          <a href=\"https://github.com/iamtheluiz/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <FaGithub />\r\n          </a>\r\n        </li>\r\n        <li>\r\n          <a href=\"https://linkedin.com/in/luiz-gustavo-da-silva-vasconcellos-05192a192/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <FaLinkedinIn />\r\n          </a>\r\n        </li>\r\n        <li>\r\n          <a href=\"mailto:iamtheluiz.dev@gmail.com\">\r\n            <MdMail />\r\n          </a>\r\n        </li>\r\n        <li>\r\n          <a href=\"https://www.instagram.com/iamtheluizvasc/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <FaInstagram />\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    </section>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nexport default function Projects({ projects }) {\r\n  return (\r\n    <section id=\"Projects\">\r\n      <h2>Projects</h2>\r\n      <ul>\r\n        {projects.map(project => (\r\n          <li key={project.repository} className=\"card\">\r\n            <a href={project.repository} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              <h3>{project.name}</h3>\r\n              <p>{project.description}</p>\r\n              <footer>\r\n                <div className=\"circle\"></div> {project.technology}\r\n              </footer>\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </section>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <footer>\r\n      &copy; Luiz Gustavo da Silva Vasconcellos 2020\r\n    </footer>\r\n  );\r\n}\r\n","import React from 'react';\n\n// Site data\nimport projects from './services/projects';\n\n// Page components\nimport Header from './components/Header';\nimport About from './components/About';\nimport Projects from './components/Projects';\nimport Footer from './components/Footer';\n\nfunction App() {\n  const sections = [\n    { name: 'About', id: 'About' },\n    { name: 'Projects', id: 'Projects' },\n    { name: 'Social Media', id: 'SocialMedia' }\n  ];\n\n  return (\n    <>\n      <Header sections={sections} />\n      <main>\n        <About />\n        <Projects projects={projects} />\n      </main>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}